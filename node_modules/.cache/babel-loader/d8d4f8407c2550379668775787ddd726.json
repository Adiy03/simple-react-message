{"ast":null,"code":"import _defineProperty from\"/home/adi/react-messageMe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/home/adi/react-messageMe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/adi/react-messageMe/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EditUserForm=function EditUserForm(props){var _useState=useState(props.currentUser),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];useEffect(function(){setUser(props.currentUser);},[props]);// You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\nvar handleInputChange=function handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setUser(_objectSpread(_objectSpread({},user),{},_defineProperty({},name,value)));};return/*#__PURE__*/_jsxs(\"form\",{onSubmit:function onSubmit(event){event.preventDefault();props.updateUser(user.id,user);},children:[/*#__PURE__*/_jsx(\"label\",{children:\"Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"name\",value:user.name,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"label\",{children:\"Message\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",name:\"username\",value:user.username,onChange:handleInputChange}),/*#__PURE__*/_jsx(\"button\",{children:\"Update\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return props.setEditing(false);},className:\"button muted-button\",children:\"Cancel\"})]});};export default EditUserForm;","map":{"version":3,"sources":["/home/adi/react-messageMe/src/forms/EditUserForm.js"],"names":["React","useState","useEffect","EditUserForm","props","currentUser","user","setUser","handleInputChange","event","target","name","value","preventDefault","updateUser","id","username","setEditing"],"mappings":"ibAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,C,wFAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,eACFH,QAAQ,CAACG,KAAK,CAACC,WAAP,CADN,wCACpBC,IADoB,eACdC,OADc,eAG5BL,SAAS,CACP,UAAM,CACJK,OAAO,CAACH,KAAK,CAACC,WAAP,CAAP,CACD,CAHM,CAIP,CAAED,KAAF,CAJO,CAAT,CAMA;AAEA,GAAMI,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,KAAK,CAAI,mBACTA,KAAK,CAACC,MADG,CACzBC,IADyB,eACzBA,IADyB,CACnBC,KADmB,eACnBA,KADmB,CAGjCL,OAAO,gCAAMD,IAAN,wBAAaK,IAAb,CAAoBC,KAApB,GAAP,CACD,CAJD,CAMA,mBACE,cACE,QAAQ,CAAE,kBAAAH,KAAK,CAAI,CACjBA,KAAK,CAACI,cAAN,GAEAT,KAAK,CAACU,UAAN,CAAiBR,IAAI,CAACS,EAAtB,CAA0BT,IAA1B,EACD,CALH,wBAOE,+BAPF,cAQE,cAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,KAAK,CAAEA,IAAI,CAACK,IAA3C,CAAiD,QAAQ,CAAEH,iBAA3D,EARF,cASE,kCATF,cAUE,cAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,UAAxB,CAAmC,KAAK,CAAEF,IAAI,CAACU,QAA/C,CAAyD,QAAQ,CAAER,iBAAnE,EAVF,cAWE,kCAXF,cAYE,eAAQ,OAAO,CAAE,yBAAMJ,CAAAA,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAN,EAAjB,CAAgD,SAAS,CAAC,qBAA1D,oBAZF,GADF,CAkBD,CAnCD,CAqCA,cAAed,CAAAA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Message</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm\n"]},"metadata":{},"sourceType":"module"}