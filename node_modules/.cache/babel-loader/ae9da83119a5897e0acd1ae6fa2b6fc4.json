{"ast":null,"code":"var _jsxFileName = \"/home/adi/react-messageMe/src/forms/EditUserForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditUserForm = props => {\n  _s();\n\n  const [user, setUser] = useState(props.currentUser);\n  useEffect(() => {\n    setUser(props.currentUser);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setUser({ ...user,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: event => {\n      event.preventDefault();\n      props.updateUser(user.id, user);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      value: user.name,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      value: user.username,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.setEditing(false),\n      className: \"button muted-button\",\n      children: \"Cancel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EditUserForm, \"HBwM0PA57H1JRN/WoWYYFt11QXw=\");\n\n_c = EditUserForm;\nexport default EditUserForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditUserForm\");","map":{"version":3,"sources":["/home/adi/react-messageMe/src/forms/EditUserForm.js"],"names":["React","useState","useEffect","EditUserForm","props","user","setUser","currentUser","handleInputChange","event","name","value","target","preventDefault","updateUser","id","username","setEditing"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAAA;;AAC5B,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBL,QAAQ,CAACG,KAAK,CAACG,WAAP,CAAlC;AAEAL,EAAAA,SAAS,CACP,MAAM;AACJI,IAAAA,OAAO,CAACF,KAAK,CAACG,WAAP,CAAP;AACD,GAHM,EAIP,CAAEH,KAAF,CAJO,CAAT,CAH4B,CAS5B;;AAEA,QAAMI,iBAAiB,GAAGC,KAAK,IAAI;AACjC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AAEAN,IAAAA,OAAO,CAAC,EAAE,GAAGD,IAAL;AAAW,OAACK,IAAD,GAAQC;AAAnB,KAAD,CAAP;AACD,GAJD;;AAMA,sBACE;AACE,IAAA,QAAQ,EAAEF,KAAK,IAAI;AACjBA,MAAAA,KAAK,CAACI,cAAN;AAEAT,MAAAA,KAAK,CAACU,UAAN,CAAiBT,IAAI,CAACU,EAAtB,EAA0BV,IAA1B;AACD,KALH;AAAA,4BAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,KAAK,EAAEA,IAAI,CAACK,IAA3C;AAAiD,MAAA,QAAQ,EAAEF;AAA3D;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAUE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAmC,MAAA,KAAK,EAAEH,IAAI,CAACW,QAA/C;AAAyD,MAAA,QAAQ,EAAER;AAAnE;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAYE;AAAQ,MAAA,OAAO,EAAE,MAAMJ,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAvB;AAAgD,MAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAnCD;;GAAMd,Y;;KAAAA,Y;AAqCN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Message</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm\n"]},"metadata":{},"sourceType":"module"}